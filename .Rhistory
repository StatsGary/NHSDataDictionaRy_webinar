set_engine("ranger", num.threads = cores, importance = "impurity") %>%
set_mode("classification")
# the last workflow
last_rf_workflow <-
rf_workflow %>%
update_model(last_rf_mod)
# the last fit
set.seed(345)
last_rf_fit <-
last_rf_workflow %>%
last_fit(splits)
last_rf_fit
last_rf_fit %>%
pluck(".workflow", 1) %>%
pull_workflow_fit() %>%
vip(num_features = 20)
last_rf_fit %>%
collect_predictions() %>%
roc_curve(children, .pred_children) %>%
autoplot()
library(NHSRdatasets)
NHSRdatasets::ae_attendances
NHSRdatasets::LOS_model
install.packages("devtools")
devtools::install_github("yihui/xaringan")
install.packages("xaringan")
install.packages("distill")
iris <- iris
iris <- iris
# Write IRIS to database
library(odbc)
library(DBI)
iris <- iris
# Write IRIS to database
library(odbc)
library(DBI)
con <- dbConnect(odbc::odbc(),
.connection_string = 'driver={SQL Server};Server=localhost\SQLEXPRESS;Database=RDatabase;Trusted_Connection=True;')
iris <- iris
# Write IRIS to database
library(odbc)
library(DBI)
con <- dbConnect(odbc::odbc(),
.connection_string = 'driver=SQL Server;Server=localhost\SQLEXPRESS;Database=RDatabase;Trusted_Connection=True;')
con <- dbConnect(odbc::odbc(),
.connection_string = "driver=SQL Server;Server=localhost\SQLEXPRESS;Database=RDatabase;Trusted_Connection=True;")
con <- dbConnect(odbc::odbc(),
.connection_string = "Server=localhost\SQLEXPRESS;Database=RDatabase;Trusted_Connection=True;")
library(odbc)
library(DBI)
con <- dbConnect(odbc::odbc(),
Driver = "ODBC Driver 13 for SQL Server",
Server = "localhost",
Database = "RDatabase",
Trusted_Connection = "yes"
con <- dbConnect(odbc::odbc(),
Driver = "ODBC Driver 13 for SQL Server",
Server = "localhost",
Database = "RDatabase",
Trusted_Connection = "yes")
library(odbc)
library(DBI)
con <- dbConnect(odbc::odbc(),
Driver = "ODBC Driver 13 for SQL Server",
Server = "localhost",
Database = "RDatabase",
Trusted_Connection = "yes")
iris <- iris
# Write IRIS to database
library(odbc)
library(DBI)
con <- dbConnect(odbc::odbc(),
Driver = "ODBC Driver 13 for SQL Server",
Server = "localhost\\SQLEXPRESS",
Database = "master",
Trusted_Connection = "yes")
con <- dbConnect(odbc::odbc(),
Driver = "ODBC Driver 13 for SQL Server",
Server = "localhost",
Database = "master",
Trusted_Connection = "yes")
con <- dbConnect(odbc::odbc(),
Driver = "ODBC Driver 13 for SQL Server",
Server = "localhost",
Database = "master",
Trusted_Connection = T)
odbc::odbcListDrivers()
iris <- iris
# Write IRIS to database
library(odbc)
library(DBI)
con <- dbConnect(odbc::odbc(),
Driver = "ODBC Driver 17 for SQL Server",
Server = "localhost",
Database = "master",
Trusted_Connection = T)
iris <- iris
# Write IRIS to database
library(odbc)
library(DBI)
con <- dbConnect(odbc::odbc(),
Driver = "ODBC Driver 17 for SQL Server",
Server = "localhost\\SQLEXPESS",
Database = "master",
Trusted_Connection = "True")
con <- dbConnect(odbc::odbc(),
Driver = "SQL Server",
Server = "localhost\\SQLEXPESS",
Database = "master",
Trusted_Connection = "True")
iris <- iris
# Write IRIS to database
library(odbc)
library(DBI)
con <- dbConnect(odbc::odbc(),
Driver = "SQL Server",
Server = "localhost\\SQLEXPESS",
Database = "RDatabase",
Trusted_Connection = "True")
iris <- iris
# Write IRIS to database
library(odbc)
library(DBI)
con <- dbConnect(odbc::odbc(),
Driver = "SQL Server",
Server = "localhost\\SQLEXPESS",
Database = "RDatabase",
Trusted_Connection = "True")
con <- dbConnect(odbc::odbc(),
Driver = "SQL Server",
Server = "localhost\\SQLEXPESS",
Database = "master",
Trusted_Connection = "True")
iris <- iris
# Write IRIS to database
library(odbc)
library(DBI)
con <- dbConnect(odbc::odbc(),
Driver = "SQL Server",
Server = "LAPTOP-GE3S96EI\SQLEXPRESS",
Database = "master",
Trusted_Connection = "True")
con <- dbConnect(odbc::odbc(),
Driver = "SQL Server",
Server = "localhost\SQLEXPESS",
Database = "master",
Trusted_Connection = "True")
con <- dbConnect(odbc::odbc(),
Driver = "SQL Server",
Server = "localhost\\SQLEXPESS",
Database = "master",
Trusted_Connection = "True")
iris <- iris
# Write IRIS to database
library(odbc)
library(DBI)
con <- dbConnect(odbc::odbc(),
Driver = "{SQL Server}",
Server = "localhost\\SQLEXPESS",
Database = "master",
Trusted_Connection = "True")
# Write IRIS to database
sort(unique(odbcListDrivers()[[1]]))
iris <- iris
# Write IRIS to database
sort(unique(odbcListDrivers()[[1]]))
con <- dbConnect(odbc(),
Driver = "ODBC Driver 17 for SQL Server",
Server = "localhost\\SQLEXPRESS",
Database = "datawarehouse",
Trusted_Connection = "True")
iris <- iris
# Write IRIS to database
sort(unique(odbcListDrivers()[[1]]))
con <- dbConnect(odbc(),
Driver = "ODBC Driver 17 for SQL Server",
Server = "localhost\\SQLEXPRESS",
Database = "master",
Trusted_Connection = "True")
con <- dbConnect(odbc(),
Driver = "SQL Server",
Server = "localhost\\SQLEXPRESS",
Database = "master",
Trusted_Connection = "True")
# Write IRIS to database
sort(unique(odbcListDrivers()[[1]]))
con <- dbConnect(odbc(),
Driver = "SQL Server",
Server = "localhost\\SQLEXPRESS",
Database = "master",
Trusted_Connection = "True")
schema_name <- "data"
# Use odbc to write data
cm_table <- "iris"
iris <- iris
odbc::dbWriteTable(con, Id(schema = "Log", table = cm_table), iris, append = FALSE, overwrite = TRUE)
# Write IRIS to database
sort(unique(odbcListDrivers()[[1]]))
con <- dbConnect(odbc(),
Driver = "SQL Server",
Server = "localhost\\SQLEXPRESS",
Database = "RDatabase",
Trusted_Connection = "True")
schema_name <- "data"
# Use odbc to write data
cm_table <- "iris"
iris <- iris
odbc::dbWriteTable(con, Id(schema = "data", table = cm_table), iris, append = FALSE, overwrite = TRUE)
library(odbc)
library(DBI)
library(NHSRdatasets)
# Write IRIS to database
sort(unique(odbcListDrivers()[[1]]))
con <- dbConnect(odbc(),
Driver = "SQL Server",
Server = "localhost\\SQLEXPRESS",
Database = "RDatabase",
Trusted_Connection = "True")
schema_name <- "data"
# Use odbc to write data
cm_table <- "iris"
iris <- iris
odbc::dbWriteTable(con, Id(schema = "data", table = cm_table), iris, append = FALSE, overwrite = TRUE)
# Copy NHS R Datasets
library(odbc)
library(DBI)
library(NHSRdatasets)
# Write IRIS to database
sort(unique(odbcListDrivers()[[1]]))
con <- dbConnect(odbc(),
Driver = "SQL Server",
Server = "localhost\\SQLEXPRESS",
Database = "RDatabase",
Trusted_Connection = "True")
schema_name <- "data"
# Use odbc to write data
cm_table <- "iris"
iris <- iris
odbc::dbWriteTable(con, Id(schema = "data", table = cm_table), iris, append = FALSE, overwrite = TRUE)
# Copy NHS R Datasets
cm_table <- "ae_attendances"
ae <- NHSRdatasets::ae_attendances
odbc::dbWriteTable(con, Id(schema = "data", table = cm_table), ae, append = FALSE, overwrite = TRUE)
source('C:/Users/garyh/Desktop/RConnectToLocalHost.R')
install.packages("NHSDataDictionaRy")
library(NHSDataDictionaRy)
library(NHSDataDictionaRy)
NHSDataDictionaRy::nhs_data_elements()
lookup_df <- NHSDataDictionaRy::nhs_data_elements()
lookup_df %>%
slice(2)
library(dplyr)
lookup_df <- NHSDataDictionaRy::nhs_data_elements()
lookup_df %>%
slice(2)
NHSDataDictionaRy::tableR(lookup_df$full_url,
lookup_df$xpath_perm_code)
NHSDataDictionaRy::tableR(lookup_df$full_url,
lookup_df$xpath_perm_code,
title = "Test")
lookup_df %>%
slice(10)
NHSDataDictionaRy::tableR(lookup_df$full_url,
lookup_df$xpath_perm_code,
title = "Test")
lookup_df  %<>%
slice(10)
library(magrittr)
lookup_df <- NHSDataDictionaRy::nhs_data_elements()
lookup_df  %<>%
slice(10)
NHSDataDictionaRy::tableR(lookup_df$full_url,
lookup_df$xpath_perm_code,
title = "Test")
lookup_df  %<>%
slice(11)
NHSDataDictionaRy::tableR(lookup_df$full_url,
lookup_df$xpath_perm_code,
title = "Test")
lookup_df  %<>%
slice(12)
NHSDataDictionaRy::tableR(lookup_df$full_url,
lookup_df$xpath_perm_code,
title = "Test")
library(NHSDataDictionaRy)
library(dplyr)
library(magrittr)
lookup_df <- NHSDataDictionaRy::nhs_data_elements()
lookup_df  %<>%
slice(12)
NHSDataDictionaRy::tableR(lookup_df$full_url,
lookup_df$xpath_perm_code,
title = "Test")
View(lookup_df)
NHSDataDictionaRy::tableR(lookup_df$full_url,
lookup_df$xpath_perm_code,
title = lookup_df$link_name)
lookup_df_original <- NHSDataDictionaRy::nhs_data_elements()
lookup_df  %<>%
slice(12)
NHSDataDictionaRy::tableR(lookup_df$full_url,
lookup_df$xpath_perm_code,
title = lookup_df$link_name)
lookup_df <- lookup_df_original  %>%
slice(12)
NHSDataDictionaRy::tableR(lookup_df$full_url,
lookup_df$xpath_perm_code,
title = lookup_df$link_name)
View(lookup_df_original)
lookup_df_original %>%
filter(link_name == "ORGANISATION NAME")
lookup_df_original %>%
filter(link_name == "ORGANISATION NAME") %>%
NHSDataDictionaRy::tableR(lookup_df$full_url,
lookup_df$xpath_perm_code,
title = lookup_df$link_name)
lookup_df_original %>%
filter(link_name == "ORGANISATION NAME") %>%
NHSDataDictionaRy::tableR(full_url,
xpath_perm_code,
link_name)
library(NHSDataDictionaRy)
library(dplyr)
library(magrittr)
lookup_df_original <- NHSDataDictionaRy::nhs_data_elements()
lookup_df <- lookup_df_original  %>%
slice(12)
lookup_df_original %>%
filter(link_name == "ORGANISATION NAME") %>%
NHSDataDictionaRy::tableR(full_url,
xpath_perm_code,
link_name)
library(NHSDataDictionaRy)
library(dplyr)
library(magrittr)
lookup_df_original <- NHSDataDictionaRy::nhs_data_elements()
lookup_df <- lookup_df_original  %>%
slice(12)
lookup_df_original %>%
filter(link_name == "ORGANISATION NAME") %>%
NHSDataDictionaRy::tableR(full_url,
xpath_perm_code,
link_name)
lookup_df <- lookup_df_original  %>%
filter(link_name == "ORGANISATION NAME")
lookup_df %>%
NHSDataDictionaRy::tableR(full_url,
xpath_perm_code,
link_name)
lookup_df %>%
NHSDataDictionaRy::tableR(full_url,
xpath_perm_code,
link_name)
lookup_df %>%
NHSDataDictionaRy::tableR(full_url,
xpath_perm_code,
link_name)
lookup_df %>%
NHSDataDictionaRy::tableR(full_url,
xpath_perm_code,
link_name)
lookup_df %>%
NHSDataDictionaRy::tableR(full_url,
xpath_perm_code,
link_name)
lookup_df %>%
NHSDataDictionaRy::tableR(full_url,
xpath_perm_code,
link_name)
lookup_df %>%
NHSDataDictionaRy::tableR(lookup_df$full_url,
lookup_df$xpath_perm_code,
lookup_df$link_name)
NHSDataDictionaRy::tableR(lookup_df$full_url,
lookup_df$xpath_perm_code,
lookup_df$link_name)
View(lookup_df_original)
lookup_df_original$link_name
unique(lookup_df_original$link_name)
NHSDataDictionaRy::left_xl(lookup_df$link_name, 3)
NHSDataDictionaRy::left_xl(lookup_df$link_name, 10)
left_xl(lookup_df$link_name, 10)
left_xl(lookup_df$link_name, 10)
source('~/.active-rstudio-document')
View(lookup_df_original)
lookup_df_original %>%
slice(142)
lookup_df_original %>%
slice(1492)
lookup_df_original %>%
slice(1492) %>%
NHSDataDictionaRy::tableR(lookup_df$full_url,
lookup_df$xpath_perm_code,
lookup_df$link_name)
lookup_df_original %>%
slice(1492) %>%
NHSDataDictionaRy::tableR(full_url,
xpath_perm_code,
link_name)
df <- lookup_df_original %>%
slice(1492)
NHSDataDictionaRy::tableR(df$full_url,
df$xpath_perm_code,
df$link_name)
View(lookup_df_original)
df <- lookup_df_original %>%
slice(12)
NHSDataDictionaRy::tableR(df$full_url,
df$xpath_perm_code,
df$link_name)
accom_status <- NHSDataDictionaRy::tableR(df$full_url,
df$xpath_perm_code,
df$link_name)
View(accom_status)
View(accom_status)
lookup_df <- lookup_df_original  %>%
filter(link_name == "ORGANISATION NAME")
library(NHSDataDictionaRy)
library(dplyr)
library(magrittr)
lookup_df <- lookup_df_original  %>%
filter(link_name == "ORGANISATION NAME")
lookup_df_original <- NHSDataDictionaRy::nhs_data_elements()
unique(lookup_df_original$link_name)
left_xl(lookup_df$link_name, 10)
lookup_df <- lookup_df_original  %>%
filter(link_name == "ORGANISATION NAME")
View(lookup_df)
lookup_df <- lookup_df_original  %>%
filter(link_name == "ORGANISATION NAME") %>%
tableR(url = full_url,
xpath = xpath_perm_code)
lookup_df <- lookup_df_original  %>%
filter(link_name == "ORGANISATION NAME") %>%
tableR(url = full_url,
xpath = xpath_perm_code)
View(lookup_df)
tableR(url = lookup_df_original$full_url,
xpath = lookup_df_original$xpath_perm_code)
lookup_df <- lookup_df_original  %>%
filter(link_name == "ORGANISATION NAME")
tableR(url = lookup_df_original$full_url,
xpath = lookup_df_original$xpath_perm_code)
tableR(url = lookup_df$full_url,
xpath = lookup_df$xpath_perm_code)
#Create download log of NHSDataDictionaRy package
library(ggplot2)
library(dlstats)
packages <- c("caret", "tidymodels", "parsnip")
pack_status <- cran_stats("caret")
View(pack_status)
pack_status <- cran_stats(packages)
#View the head of the data frame
head(pack_status)
if (!is.null(pack_status)){
head(pack_status)
plot <- ggplot(pack_status,
aes(end, downloads, group=package)) + geom_line(aes(color=package),linetype="dashed") +
geom_point(aes(shape=package, color=package)) + theme_minimal()
plot <- plot + xlab("Download date") + ylab("Number of downloads")
print(plot)
}
print(plot)
packages <- c("NHSDataDictionaRy")
pack_status <- cran_stats(packages)
#View the head of the data frame
head(pack_status)
if (!is.null(pack_status)){
head(pack_status)
plot <- ggplot(pack_status,
aes(end, downloads, group=package)) + geom_line(aes(color=package),linetype="dashed") +
geom_point(aes(shape=package, color=package)) + theme_minimal()
plot <- plot + xlab("Download date") + ylab("Number of downloads")
print(plot)
}
print(plot)
package_list <- list("package_dl_plot"= plot,
"download_df"=as_tibble(pack_status),
"downloads_to_date"=sum(pack_status$downloads))
package_list <- list("package_dl_plot"= plot,
"download_df"=as_tibble(pack_status),
"downloads_to_date"=sum(pack_status$downloads))
#Create download log of NHSDataDictionaRy package
library(ggplot2)
library(dlstats)
library(tibble)
packages <- c("NHSDataDictionaRy")
pack_status <- cran_stats(packages)
#View the head of the data frame
head(pack_status)
if (!is.null(pack_status)){
head(pack_status)
plot <- ggplot(pack_status,
aes(end, downloads, group=package)) + geom_line(aes(color=package),linetype="dashed") +
geom_point(aes(shape=package, color=package)) + theme_minimal()
plot <- plot + xlab("Download date") + ylab("Number of downloads")
print(plot)
}
print(plot)
package_list <- list("package_dl_plot"= plot,
"download_df"=as_tibble(pack_status),
"downloads_to_date"=sum(pack_status$downloads))
View(pack_status)
View(package_list)
package_list <- list("package_dl_plot"= plot,
"download_df"=as_tibble(pack_status),
"downloads_to_date"=sum(pack_status$downloads))
package_list$download_df
package_list$package_dl_plot
#Access the plot
package_list$downloads_to_date
setwd("~/GitHub/NHSDataDictionaRy_webinar")
