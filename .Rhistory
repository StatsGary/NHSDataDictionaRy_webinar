knitr::opts_chunk$set(echo = TRUE)
library(NHSDataDictionaRy)
library(dplyr)
library(magrittr)
library(tibble)
knitr::opts_chunk$set(echo = TRUE)
nhs_tibble <- NHSDataDictionaRy::nhs_data_elements()
print(head(nhs_tibble))
# Analyse all the links on a website
website_url <- "https://nhsrcommunity.com/home/webinars/"
results <- NHSDataDictionaRy::linkScrapeR(website_url)
print(head(results, 20))
knitr::opts_chunk$set(echo = TRUE)
# Analyse all the links on a website
website_url <- "https://nhsrcommunity.com/home/webinars/"
results <- NHSDataDictionaRy::linkScrapeR(website_url)
print(tail(results, 20))
knitr::opts_chunk$set(echo = TRUE)
subset_results <- slice(results, 10)
View(subset_results)
knitr::opts_chunk$set(echo = TRUE)
#This opens the 18th result of the URL
browseURL(subset_results)
knitr::opts_chunk$set(echo = TRUE)
#This opens the 18th result of the URL
browseURL(subset_results$url)
knitr::opts_chunk$set(echo = TRUE)
subset_results <- slice(results, 15)
## Opening a URL from R into a web browser
To navigate to the specific URL you can use the utils::browseURL command:
```{r browse_url}
#This opens the 18th result of the URL
browseURL(subset_results$url)
#This opens the 18th result of the URL
browseURL(subset_results$url)
# Analyse all the links on a website
website_url <- "https://nhsrcommunity.com/home/webinars/"
results <- NHSDataDictionaRy::linkScrapeR(website_url)
print(tail(results, 20))
subset_results <- slice(results, 15)
#This opens the 18th result of the URL
browseURL(subset_results$url)
knitr::opts_chunk$set(echo = TRUE)
print(subset_results)
knitr::opts_chunk$set(echo = TRUE)
subset_results <- slice(results, 16)
print(subset_results)
## Opening a URL from R into a web browser
To navigate to the specific URL you can use the utils::browseURL command:
```{r browse_url}
#This opens the 18th result of the URL
browseURL(subset_results$url)
# Analyse all the links on a website
website_url <- "https://nhsrcommunity.com/home/webinars/"
results <- NHSDataDictionaRy::linkScrapeR(website_url)
print(tail(results, 20))
subset_results <- slice(results, 16)
print(subset_results)
#This opens the 18th result of the URL
browseURL(subset_results$url)
# Filter by a specific lookup required
reduced_tibble <-
dplyr::filter(nhs_tibble, link_name == "ACTIVITY TREATMENT FUNCTION CODE")
#Use the tableR function to query the NHS Data Dictionary website and return the associate tibble
national_codes <- NHSDataDictionaRy::tableR(url=reduced_tibble$full_url,
xpath = reduced_tibble$xpath_nat_code,
title = "NHS Hospital Activity Treatment Function National Codes")
default_codes <- NHSDataDictionaRy::tableR(url=reduced_tibble$full_url,
xpath = reduced_tibble$xpath_default_code,
title = "NHS Hospital Activity Treatment Function Default Codes")
# Here you could merge the codes - as you will have national and default codes
merged_frame <- national_codes %>%
dplyr::bind_rows(default_codes)
# The query has returned results, if the url does not have a lookup table an error will be thrown
print(head(national_codes,10))
print(head(default_codes), 10)
print(head(merged_frame))
View(merged_frame)
act_aggregations <- tibble(SpecCode = as.character(c(101,102,103, 104, 105)),
ActivityCounts = round(rnorm(5,250,3),0),
Month = rep("May", 5))
# Use dplyr to join the NHS activity by specialty code
act_aggregations %>%
left_join(merged_frame, by = c("SpecCode"="Code"))
# This easily joins the lookup on to your data
knitr::opts_chunk$set(echo = TRUE)
library(NHSRdatasets)
knitr::opts_chunk$set(echo = TRUE)
NHSRdatasets::ae_attendances
knitr::opts_chunk$set(echo = TRUE)
NHSRdatasets::LOS_model
knitr::opts_chunk$set(echo = TRUE)
ae <- NHSRdatasets::ae_attendances
View(ae)
View(nhs_tibble)
knitr::opts_chunk$set(echo = TRUE)
nhs_tibble %>%
filter(link_name== "ORGANISATION CODE (CODE OF PROVIDER)")
knitr::opts_chunk$set(echo = TRUE)
org_lookup_ref <- nhs_tibble %>%
filter(link_name== "ORGANISATION CODE (CODE OF PROVIDER)")
knitr::opts_chunk$set(echo = TRUE)
library(NHSRdatasets)
ae <- NHSRdatasets::ae_attendances
# Find org code from nhs_tibble
org_lookup_ref <- nhs_tibble %>%
filter(link_name== "ORGANISATION CODE (CODE OF PROVIDER)")
#Find national org code
org_code_nat <- NHSDataDictionaRy::tableR(url=org_lookup_ref$full_url,
xpath = org_lookup_ref$xpath_nat_code,
title = "Org National Code - Provider")
knitr::opts_chunk$set(echo = TRUE)
org_lookup_ref$full_url
knitr::opts_chunk$set(echo = TRUE)
act_aggregations <- tibble(SpecCode = as.character(c(101,102,103, 104, 105)),
ActivityCounts = round(rnorm(5,250,3),0),
Month = rep("May", 5))
# Use dplyr to join the NHS activity by specialty code
act_aggregations %>%
left_join(merged_frame, by = c("SpecCode"="Code"))
# This easily joins the lookup on to your data
knitr::opts_chunk$set(echo = TRUE)
url <- "https://datadictionary.nhs.uk/data_elements/abbreviated_mental_test_score.html"
xpath_element <- '//*[@id="element_abbreviated_mental_test_score.description"]'
# Run the xpathTextR function to retrieve details of the element retrieved
result_list <- NHSDataDictionaRy::xpathTextR(url, xpath_element)
print(result_list)
# Use the returned result and do some text processing
clean_text <- trimws(unlist(result_list$result))
clean_text <- clean_text %>%
gsub("[\r\n]", "", .) %>% #Remove new line and breaks
trimws() %>% #Get rid of any white space
as.character() #Cast to a character vector
print(clean_text)
knitr::opts_chunk$set(echo = TRUE)
left_clean <- NHSDataDictionaRy::left_xl(clean_text, 11)
knitr::opts_chunk$set(echo = TRUE)
print(left_clean)
knitr::opts_chunk$set(echo = TRUE)
# Use the right string to extract the score range
right_clean <- NHSDataDictionaRy::right_xl(clean_text, 8)
knitr::opts_chunk$set(echo = TRUE)
print(right_clean)
knitr::opts_chunk$set(echo = TRUE)
#Use the mid function to look in the middle of the string
mid_clean <- NHSDataDictionaRy::mid_xl(clean_text, 11, 29)
# Use the left_xl function to extract the first 11 characters
left_clean <- NHSDataDictionaRy::left_xl(clean_text, 11)
print(left_clean)
# Use the right string to extract the score range
right_clean <- NHSDataDictionaRy::right_xl(clean_text, 8)
print(right_clean)
#Use the mid function to look in the middle of the string
mid_clean <- NHSDataDictionaRy::mid_xl(clean_text, 11, 29)
knitr::opts_chunk$set(echo = TRUE)
# Use the left_xl function to extract the first 11 characters
left_clean <- NHSDataDictionaRy::left_xl(clean_text, 11)
print(left_clean)
# Use the right string to extract the score range
right_clean <- NHSDataDictionaRy::right_xl(clean_text, 8)
print(right_clean)
#Use the mid function to look in the middle of the string
mid_clean <- NHSDataDictionaRy::mid_xl(clean_text, 11, 29)
print(mid_clean)
knitr::opts_chunk$set(echo = TRUE)
# Use the left_xl function to extract the first 11 characters
left_clean <- NHSDataDictionaRy::left_xl(clean_text, 11)
print(left_clean)
# Use the right string to extract the score range
right_clean <- NHSDataDictionaRy::right_xl(clean_text, 8)
print(right_clean)
#Use the mid function to look in the middle of the string
mid_clean <- NHSDataDictionaRy::mid_xl(clean_text, 15, 29)
print(mid_clean)
knitr::opts_chunk$set(echo = TRUE)
# Use the left_xl function to extract the first 11 characters
left_clean <- NHSDataDictionaRy::left_xl(clean_text, 11)
print(left_clean)
# Use the right string to extract the score range
right_clean <- NHSDataDictionaRy::right_xl(clean_text, 8)
print(right_clean)
#Use the mid function to look in the middle of the string
mid_clean <- trimws(NHSDataDictionaRy::mid_xl(clean_text, 15, 29))
print(mid_clean)
knitr::opts_chunk$set(echo = TRUE)
# Use the left_xl function to extract the first 11 characters
left_clean <- NHSDataDictionaRy::left_xl(clean_text, 11)
print(left_clean)
# Use the right string to extract the score range
right_clean <- NHSDataDictionaRy::right_xl(clean_text, 8)
print(right_clean)
#Use the mid function to look in the middle of the string
mid_clean <- trimws(NHSDataDictionaRy::mid_xl(clean_text, 15, 38))
print(mid_clean)
knitr::opts_chunk$set(echo = TRUE)
# Use the left_xl function to extract the first 11 characters
left_clean <- NHSDataDictionaRy::left_xl(clean_text, 11)
print(left_clean)
# Use the right string to extract the score range
right_clean <- NHSDataDictionaRy::right_xl(clean_text, 8)
print(right_clean)
#Use the mid function to look in the middle of the string
mid_clean <- trimws(NHSDataDictionaRy::mid_xl(clean_text, 15, 42))
print(mid_clean)
knitr::opts_chunk$set(echo = TRUE)
#Get the text length
len_xl(clean_text)
knitr::opts_chunk$set(echo = TRUE)
#Get the text length
full_string <- len_xl(clean_text)
knitr::opts_chunk$set(echo = TRUE)
# Use the left_xl function to extract the first 11 characters
left_clean <- NHSDataDictionaRy::left_xl(clean_text, 11)
print(left_clean)
# Use the right string to extract the score range
right_clean <- NHSDataDictionaRy::right_xl(clean_text, 8)
print(right_clean)
#Use the mid function to look in the middle of the string
mid_clean <- trimws(NHSDataDictionaRy::mid_xl(clean_text, 15, 42))
print(mid_clean)
#Get the text length
full_string <- len_xl(clean_text)
mid_clean_len <- len_xl(clean_text)
knitr::opts_chunk$set(echo = TRUE)
# Use the left_xl function to extract the first 11 characters
left_clean <- NHSDataDictionaRy::left_xl(clean_text, 11)
print(left_clean)
# Use the right string to extract the score range
right_clean <- NHSDataDictionaRy::right_xl(clean_text, 8)
print(right_clean)
#Use the mid function to look in the middle of the string
mid_clean <- trimws(NHSDataDictionaRy::mid_xl(clean_text, 15, 42))
print(mid_clean)
#Get the text length
full_string <- len_xl(clean_text)
mid_clean_len <- len_xl(clean_text)
cat(paste("The original string length was: ", full_string, "\n", "The mid_xl cleaned string length is: ",
mid_clean_len))
knitr::opts_chunk$set(echo = TRUE)
# Use the left_xl function to extract the first 11 characters
left_clean <- NHSDataDictionaRy::left_xl(clean_text, 11)
print(left_clean)
# Use the right string to extract the score range
right_clean <- NHSDataDictionaRy::right_xl(clean_text, 8)
print(right_clean)
#Use the mid function to look in the middle of the string
mid_clean <- trimws(NHSDataDictionaRy::mid_xl(clean_text, 15, 42))
print(mid_clean)
#Get the text length
full_string <- len_xl(clean_text)
mid_clean_len <- len_xl(mid_clean)
cat(paste("The original string length was: ", full_string, "\n", "The mid_xl cleaned string length is: ",
mid_clean_len))
knitr::opts_chunk$set(echo = TRUE)
# Use the left_xl function to extract the first 11 characters
left_clean <- NHSDataDictionaRy::left_xl(clean_text, 11)
print(left_clean)
# Use the right string to extract the score range
right_clean <- NHSDataDictionaRy::right_xl(clean_text, 8)
print(right_clean)
#Use the mid function to look in the middle of the string
mid_clean <- trimws(NHSDataDictionaRy::mid_xl(clean_text, 15, 42))
print(mid_clean)
#Get the text length
full_string <- len_xl(clean_text)
mid_clean_len <- len_xl(mid_clean)
cat(paste0("The original string length was: ", full_string, "\n", "The mid_xl cleaned string length is: ",
mid_clean_len))
knitr::opts_chunk$set(echo = TRUE)
# Use the left_xl function to extract the first 11 characters
left_clean <- NHSDataDictionaRy::left_xl(clean_text, 11)
print(left_clean)
# Use the right string to extract the score range
right_clean <- NHSDataDictionaRy::right_xl(clean_text, 8)
print(right_clean)
#Use the mid function to look in the middle of the string
mid_clean <- trimws(NHSDataDictionaRy::mid_xl(clean_text, 15, 42))
print(mid_clean)
#Get the text length
full_string <- len_xl(clean_text)
mid_clean_len <- len_xl(mid_clean)
print("-------------------------------------------------------------------------------------------------")
cat(paste0("The original string length was: ", full_string, "\n", "The mid_xl cleaned string length is: ",
mid_clean_len))
print("--------------------------------------------------------------------------------------------------")
knitr::opts_chunk$set(echo = TRUE)
# Use the left_xl function to extract the first 11 characters
left_clean <- NHSDataDictionaRy::left_xl(clean_text, 11)
print(left_clean)
# Use the right string to extract the score range
right_clean <- NHSDataDictionaRy::right_xl(clean_text, 8)
print(right_clean)
#Use the mid function to look in the middle of the string
mid_clean <- trimws(NHSDataDictionaRy::mid_xl(clean_text, 15, 42))
print(mid_clean)
#Get the text length
full_string <- len_xl(clean_text)
mid_clean_len <- len_xl(mid_clean)
print("-------------------------------------------------------------------------------------------------")
cat(paste0("The original string length was: ", full_string, "\n", "The mid_xl cleaned string length is: ",
mid_clean_len))
setwd("~/GitHub/NHSDataDictionaRy_webinar")
knitr::opts_chunk$set(echo = TRUE)
merged_frameR <- function(filter_param){
.filter <- enquo(filter_param)
# Filter by a specific lookup required
reduced_tibble <-
dplyr::filter(nhs_tibble, link_name == !!.filter)
# national_codes <- NHSDataDictionaRy::tableR(url=reduced_tibble$full_url,
#                           xpath = reduced_tibble$xpath_nat_code,
#                           title = "NHS Hospital Activity Treatment Function National Codes")
# default_codes <- NHSDataDictionaRy::tableR(url=reduced_tibble$full_url,
#                           xpath = reduced_tibble$xpath_default_code,
#                           title = "NHS Hospital Activity Treatment Function Default Codes")
#
#
# # Here you could merge the codes - as you will have national and default codes
#
# merged_frame <- national_codes %>%
#   dplyr::bind_rows(default_codes)
}
merged_frameR <- function(filter_param){
.filter <- enquo(filter_param)
# Filter by a specific lookup required
reduced_tibble <-
dplyr::filter(nhs_tibble, link_name == !!.filter)
print(reduced_tibble)
# national_codes <- NHSDataDictionaRy::tableR(url=reduced_tibble$full_url,
#                           xpath = reduced_tibble$xpath_nat_code,
#                           title = "NHS Hospital Activity Treatment Function National Codes")
# default_codes <- NHSDataDictionaRy::tableR(url=reduced_tibble$full_url,
#                           xpath = reduced_tibble$xpath_default_code,
#                           title = "NHS Hospital Activity Treatment Function Default Codes")
#
#
# # Here you could merge the codes - as you will have national and default codes
#
# merged_frame <- national_codes %>%
#   dplyr::bind_rows(default_codes)
}
merged_frameR <- function(filter_param){
.filter <- enquo(filter_param)
# Filter by a specific lookup required
reduced_tibble <-
dplyr::filter(nhs_tibble, link_name == !!.filter)
print(reduced_tibble)
# national_codes <- NHSDataDictionaRy::tableR(url=reduced_tibble$full_url,
#                           xpath = reduced_tibble$xpath_nat_code,
#                           title = "NHS Hospital Activity Treatment Function National Codes")
# default_codes <- NHSDataDictionaRy::tableR(url=reduced_tibble$full_url,
#                           xpath = reduced_tibble$xpath_default_code,
#                           title = "NHS Hospital Activity Treatment Function Default Codes")
#
#
# # Here you could merge the codes - as you will have national and default codes
#
# merged_frame <- national_codes %>%
#   dplyr::bind_rows(default_codes)
}
merged_frameR("ACTIVITY TREATMENT FUNCTION CODE")
merged_frameR <- function(filter_param){
.filter <- enquo(filter_param)
# Filter by a specific lookup required
reduced_tibble <-
dplyr::filter(nhs_tibble, link_name == !!.filter)
return(reduced_tibble)
}
merged_frameR("ACTIVITY TREATMENT FUNCTION CODE")
# national_codes <- NHSDataDictionaRy::tableR(url=reduced_tibble$full_url,
#                           xpath = reduced_tibble$xpath_nat_code,
#                           title = "NHS Hospital Activity Treatment Function National Codes")
# default_codes <- NHSDataDictionaRy::tableR(url=reduced_tibble$full_url,
#                           xpath = reduced_tibble$xpath_default_code,
#                           title = "NHS Hospital Activity Treatment Function Default Codes")
#
#
# # Here you could merge the codes - as you will have national and default codes
#
# merged_frame <- national_codes %>%
#   dplyr::bind_rows(default_codes)
merged_frameR <- function(filter_param){
# Filter by a specific lookup required
reduced_tibble <-
dplyr::filter(nhs_tibble, link_name == filter_param)
return(reduced_tibble)
}
merged_frameR("ACTIVITY TREATMENT FUNCTION CODE")
# national_codes <- NHSDataDictionaRy::tableR(url=reduced_tibble$full_url,
#                           xpath = reduced_tibble$xpath_nat_code,
#                           title = "NHS Hospital Activity Treatment Function National Codes")
# default_codes <- NHSDataDictionaRy::tableR(url=reduced_tibble$full_url,
#                           xpath = reduced_tibble$xpath_default_code,
#                           title = "NHS Hospital Activity Treatment Function Default Codes")
#
#
# # Here you could merge the codes - as you will have national and default codes
#
# merged_frame <- national_codes %>%
#   dplyr::bind_rows(default_codes)
merged_frameR <- function(filter_param){
# Filter by a specific lookup required
reduced_tibble <-
dplyr::filter(nhs_tibble, link_name == filter_param)
national_codes <- NHSDataDictionaRy::tableR(url=reduced_tibble$full_url,
xpath = reduced_tibble$xpath_nat_code,
title = paste(filter_param, " - NATIONAL CODES"))
default_codes   <- NHSDataDictionaRy::tableR(url=reduced_tibble$full_url,
xpath = reduced_tibble$xpath_default_code,
title = paste(filter_param, " - DEFAULT CODES"))
if (length(national_codes)>0 | length(default_codes)>0){
merged_frame <- national_codes %>%
dplyr::bind_rows(default_codes)
} else{
stop("No lookup exists for this code set")
}
}
merged_frameR("ACTIVITY TREATMENT FUNCTION CODE")
merged_frameR <- function(filter_param){
# Filter by a specific lookup required
reduced_tibble <-
dplyr::filter(nhs_tibble, link_name == filter_param)
national_codes <- NHSDataDictionaRy::tableR(url=reduced_tibble$full_url,
xpath = reduced_tibble$xpath_nat_code,
title = paste(filter_param, " - NATIONAL CODES"))
default_codes   <- NHSDataDictionaRy::tableR(url=reduced_tibble$full_url,
xpath = reduced_tibble$xpath_default_code,
title = paste(filter_param, " - DEFAULT CODES"))
if (length(national_codes)>0 | length(default_codes)>0){
merged_frame <- national_codes %>%
dplyr::bind_rows(default_codes)
return(merged_frame)
} else{
stop("No lookup exists for this code set")
}
}
merged_frameR("ACTIVITY TREATMENT FUNCTION CODE")
# national_codes <- NHSDataDictionaRy::tableR(url=reduced_tibble$full_url,
#                           xpath = reduced_tibble$xpath_nat_code,
#                           title = "NHS Hospital Activity Treatment Function National Codes")
# default_codes <- NHSDataDictionaRy::tableR(url=reduced_tibble$full_url,
#                           xpath = reduced_tibble$xpath_default_code,
#                           title = "NHS Hospital Activity Treatment Function Default Codes")
#
#
# # Here you could merge the codes - as you will have national and default codes
#
# merged_frame <- national_codes %>%
#   dplyr::bind_rows(default_codes)
merged_frameR <- function(filter_param){
# Filter by a specific lookup required
reduced_tibble <-
dplyr::filter(nhs_tibble, link_name == filter_param)
national_codes <- NHSDataDictionaRy::tableR(url=reduced_tibble$full_url,
xpath = reduced_tibble$xpath_nat_code,
title = paste(filter_param, " - NATIONAL CODES"))
default_codes   <- NHSDataDictionaRy::tableR(url=reduced_tibble$full_url,
xpath = reduced_tibble$xpath_default_code,
title = paste(filter_param, " - DEFAULT CODES"))
if (length(national_codes)>1 | length(default_codes)>1){
merged_frame <- national_codes %>%
dplyr::bind_rows(default_codes)
return(merged_frame)
} else{
stop("No lookup exists for this code set")
}
}
merged_frameR("ACTIVITY TREATMENT FUNCTION CODE")
# national_codes <- NHSDataDictionaRy::tableR(url=reduced_tibble$full_url,
#                           xpath = reduced_tibble$xpath_nat_code,
#                           title = "NHS Hospital Activity Treatment Function National Codes")
# default_codes <- NHSDataDictionaRy::tableR(url=reduced_tibble$full_url,
#                           xpath = reduced_tibble$xpath_default_code,
#                           title = "NHS Hospital Activity Treatment Function Default Codes")
#
#
# # Here you could merge the codes - as you will have national and default codes
#
# merged_frame <- national_codes %>%
#   dplyr::bind_rows(default_codes)
merged_frameR <- function(filter_param){
# Filter by a specific lookup required
reduced_tibble <-
dplyr::filter(nhs_tibble, link_name == filter_param)
national_codes <- NHSDataDictionaRy::tableR(url=reduced_tibble$full_url,
xpath = reduced_tibble$xpath_nat_code,
title = paste(filter_param, " - NATIONAL CODES"))
default_codes   <- NHSDataDictionaRy::tableR(url=reduced_tibble$full_url,
xpath = reduced_tibble$xpath_default_code,
title = paste(filter_param, " - DEFAULT CODES"))
if (length(national_codes)>0 | length(default_codes)>0){
merged_frame <- national_codes %>%
dplyr::bind_rows(default_codes)
return(merged_frame)
} else{
stop("No lookup exists for this code set")
}
}
merged_frameR("ACTIVITY TREATMENT FUNCTION CODE")
merged_frameR("ACTIVITY TREATMENT FUNCTION ")
merged_frameR("ACTIVITY TREATMENT FUNCTION CODES")
merged_frameR("ACTIVITY TREATMENT FUNCTION CODE")
# Use the function we have created to pass the name of the lookup
tail(merged_frameR("ACTIVITY TREATMENT FUNCTION CODE"), 20)
# Use the function we have created to pass the name of the lookup
tail(merged_frameR("ACTIVITY TREATMENT FUNCTION CODE"), 15)
# Use the function we have created to pass the name of the lookup
tail(merged_frameR("ACTIVITY TREATMENT FUNCTION CODE"), 10)
knitr::opts_chunk$set(echo = TRUE)
library(NHSDataDictionaRy)
library(dplyr)
library(magrittr)
library(tibble)
