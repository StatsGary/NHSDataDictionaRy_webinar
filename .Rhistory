sort(unique(odbcListDrivers()[[1]]))
iris <- iris
# Write IRIS to database
sort(unique(odbcListDrivers()[[1]]))
con <- dbConnect(odbc(),
Driver = "ODBC Driver 17 for SQL Server",
Server = "localhost\\SQLEXPRESS",
Database = "datawarehouse",
Trusted_Connection = "True")
iris <- iris
# Write IRIS to database
sort(unique(odbcListDrivers()[[1]]))
con <- dbConnect(odbc(),
Driver = "ODBC Driver 17 for SQL Server",
Server = "localhost\\SQLEXPRESS",
Database = "master",
Trusted_Connection = "True")
con <- dbConnect(odbc(),
Driver = "SQL Server",
Server = "localhost\\SQLEXPRESS",
Database = "master",
Trusted_Connection = "True")
# Write IRIS to database
sort(unique(odbcListDrivers()[[1]]))
con <- dbConnect(odbc(),
Driver = "SQL Server",
Server = "localhost\\SQLEXPRESS",
Database = "master",
Trusted_Connection = "True")
schema_name <- "data"
# Use odbc to write data
cm_table <- "iris"
iris <- iris
odbc::dbWriteTable(con, Id(schema = "Log", table = cm_table), iris, append = FALSE, overwrite = TRUE)
# Write IRIS to database
sort(unique(odbcListDrivers()[[1]]))
con <- dbConnect(odbc(),
Driver = "SQL Server",
Server = "localhost\\SQLEXPRESS",
Database = "RDatabase",
Trusted_Connection = "True")
schema_name <- "data"
# Use odbc to write data
cm_table <- "iris"
iris <- iris
odbc::dbWriteTable(con, Id(schema = "data", table = cm_table), iris, append = FALSE, overwrite = TRUE)
library(odbc)
library(DBI)
library(NHSRdatasets)
# Write IRIS to database
sort(unique(odbcListDrivers()[[1]]))
con <- dbConnect(odbc(),
Driver = "SQL Server",
Server = "localhost\\SQLEXPRESS",
Database = "RDatabase",
Trusted_Connection = "True")
schema_name <- "data"
# Use odbc to write data
cm_table <- "iris"
iris <- iris
odbc::dbWriteTable(con, Id(schema = "data", table = cm_table), iris, append = FALSE, overwrite = TRUE)
# Copy NHS R Datasets
library(odbc)
library(DBI)
library(NHSRdatasets)
# Write IRIS to database
sort(unique(odbcListDrivers()[[1]]))
con <- dbConnect(odbc(),
Driver = "SQL Server",
Server = "localhost\\SQLEXPRESS",
Database = "RDatabase",
Trusted_Connection = "True")
schema_name <- "data"
# Use odbc to write data
cm_table <- "iris"
iris <- iris
odbc::dbWriteTable(con, Id(schema = "data", table = cm_table), iris, append = FALSE, overwrite = TRUE)
# Copy NHS R Datasets
cm_table <- "ae_attendances"
ae <- NHSRdatasets::ae_attendances
odbc::dbWriteTable(con, Id(schema = "data", table = cm_table), ae, append = FALSE, overwrite = TRUE)
source('C:/Users/garyh/Desktop/RConnectToLocalHost.R')
install.packages("NHSDataDictionaRy")
library(NHSDataDictionaRy)
library(NHSDataDictionaRy)
NHSDataDictionaRy::nhs_data_elements()
lookup_df <- NHSDataDictionaRy::nhs_data_elements()
lookup_df %>%
slice(2)
library(dplyr)
lookup_df <- NHSDataDictionaRy::nhs_data_elements()
lookup_df %>%
slice(2)
NHSDataDictionaRy::tableR(lookup_df$full_url,
lookup_df$xpath_perm_code)
NHSDataDictionaRy::tableR(lookup_df$full_url,
lookup_df$xpath_perm_code,
title = "Test")
lookup_df %>%
slice(10)
NHSDataDictionaRy::tableR(lookup_df$full_url,
lookup_df$xpath_perm_code,
title = "Test")
lookup_df  %<>%
slice(10)
library(magrittr)
lookup_df <- NHSDataDictionaRy::nhs_data_elements()
lookup_df  %<>%
slice(10)
NHSDataDictionaRy::tableR(lookup_df$full_url,
lookup_df$xpath_perm_code,
title = "Test")
lookup_df  %<>%
slice(11)
NHSDataDictionaRy::tableR(lookup_df$full_url,
lookup_df$xpath_perm_code,
title = "Test")
lookup_df  %<>%
slice(12)
NHSDataDictionaRy::tableR(lookup_df$full_url,
lookup_df$xpath_perm_code,
title = "Test")
library(NHSDataDictionaRy)
library(dplyr)
library(magrittr)
lookup_df <- NHSDataDictionaRy::nhs_data_elements()
lookup_df  %<>%
slice(12)
NHSDataDictionaRy::tableR(lookup_df$full_url,
lookup_df$xpath_perm_code,
title = "Test")
View(lookup_df)
NHSDataDictionaRy::tableR(lookup_df$full_url,
lookup_df$xpath_perm_code,
title = lookup_df$link_name)
lookup_df_original <- NHSDataDictionaRy::nhs_data_elements()
lookup_df  %<>%
slice(12)
NHSDataDictionaRy::tableR(lookup_df$full_url,
lookup_df$xpath_perm_code,
title = lookup_df$link_name)
lookup_df <- lookup_df_original  %>%
slice(12)
NHSDataDictionaRy::tableR(lookup_df$full_url,
lookup_df$xpath_perm_code,
title = lookup_df$link_name)
View(lookup_df_original)
lookup_df_original %>%
filter(link_name == "ORGANISATION NAME")
lookup_df_original %>%
filter(link_name == "ORGANISATION NAME") %>%
NHSDataDictionaRy::tableR(lookup_df$full_url,
lookup_df$xpath_perm_code,
title = lookup_df$link_name)
lookup_df_original %>%
filter(link_name == "ORGANISATION NAME") %>%
NHSDataDictionaRy::tableR(full_url,
xpath_perm_code,
link_name)
library(NHSDataDictionaRy)
library(dplyr)
library(magrittr)
lookup_df_original <- NHSDataDictionaRy::nhs_data_elements()
lookup_df <- lookup_df_original  %>%
slice(12)
lookup_df_original %>%
filter(link_name == "ORGANISATION NAME") %>%
NHSDataDictionaRy::tableR(full_url,
xpath_perm_code,
link_name)
library(NHSDataDictionaRy)
library(dplyr)
library(magrittr)
lookup_df_original <- NHSDataDictionaRy::nhs_data_elements()
lookup_df <- lookup_df_original  %>%
slice(12)
lookup_df_original %>%
filter(link_name == "ORGANISATION NAME") %>%
NHSDataDictionaRy::tableR(full_url,
xpath_perm_code,
link_name)
lookup_df <- lookup_df_original  %>%
filter(link_name == "ORGANISATION NAME")
lookup_df %>%
NHSDataDictionaRy::tableR(full_url,
xpath_perm_code,
link_name)
lookup_df %>%
NHSDataDictionaRy::tableR(full_url,
xpath_perm_code,
link_name)
lookup_df %>%
NHSDataDictionaRy::tableR(full_url,
xpath_perm_code,
link_name)
lookup_df %>%
NHSDataDictionaRy::tableR(full_url,
xpath_perm_code,
link_name)
lookup_df %>%
NHSDataDictionaRy::tableR(full_url,
xpath_perm_code,
link_name)
lookup_df %>%
NHSDataDictionaRy::tableR(full_url,
xpath_perm_code,
link_name)
lookup_df %>%
NHSDataDictionaRy::tableR(lookup_df$full_url,
lookup_df$xpath_perm_code,
lookup_df$link_name)
NHSDataDictionaRy::tableR(lookup_df$full_url,
lookup_df$xpath_perm_code,
lookup_df$link_name)
View(lookup_df_original)
lookup_df_original$link_name
unique(lookup_df_original$link_name)
NHSDataDictionaRy::left_xl(lookup_df$link_name, 3)
NHSDataDictionaRy::left_xl(lookup_df$link_name, 10)
left_xl(lookup_df$link_name, 10)
left_xl(lookup_df$link_name, 10)
source('~/.active-rstudio-document')
View(lookup_df_original)
lookup_df_original %>%
slice(142)
lookup_df_original %>%
slice(1492)
lookup_df_original %>%
slice(1492) %>%
NHSDataDictionaRy::tableR(lookup_df$full_url,
lookup_df$xpath_perm_code,
lookup_df$link_name)
lookup_df_original %>%
slice(1492) %>%
NHSDataDictionaRy::tableR(full_url,
xpath_perm_code,
link_name)
df <- lookup_df_original %>%
slice(1492)
NHSDataDictionaRy::tableR(df$full_url,
df$xpath_perm_code,
df$link_name)
View(lookup_df_original)
df <- lookup_df_original %>%
slice(12)
NHSDataDictionaRy::tableR(df$full_url,
df$xpath_perm_code,
df$link_name)
accom_status <- NHSDataDictionaRy::tableR(df$full_url,
df$xpath_perm_code,
df$link_name)
View(accom_status)
View(accom_status)
lookup_df <- lookup_df_original  %>%
filter(link_name == "ORGANISATION NAME")
library(NHSDataDictionaRy)
library(dplyr)
library(magrittr)
lookup_df <- lookup_df_original  %>%
filter(link_name == "ORGANISATION NAME")
lookup_df_original <- NHSDataDictionaRy::nhs_data_elements()
unique(lookup_df_original$link_name)
left_xl(lookup_df$link_name, 10)
lookup_df <- lookup_df_original  %>%
filter(link_name == "ORGANISATION NAME")
View(lookup_df)
lookup_df <- lookup_df_original  %>%
filter(link_name == "ORGANISATION NAME") %>%
tableR(url = full_url,
xpath = xpath_perm_code)
lookup_df <- lookup_df_original  %>%
filter(link_name == "ORGANISATION NAME") %>%
tableR(url = full_url,
xpath = xpath_perm_code)
View(lookup_df)
tableR(url = lookup_df_original$full_url,
xpath = lookup_df_original$xpath_perm_code)
lookup_df <- lookup_df_original  %>%
filter(link_name == "ORGANISATION NAME")
tableR(url = lookup_df_original$full_url,
xpath = lookup_df_original$xpath_perm_code)
tableR(url = lookup_df$full_url,
xpath = lookup_df$xpath_perm_code)
#Create download log of NHSDataDictionaRy package
library(ggplot2)
library(dlstats)
packages <- c("caret", "tidymodels", "parsnip")
pack_status <- cran_stats("caret")
View(pack_status)
pack_status <- cran_stats(packages)
#View the head of the data frame
head(pack_status)
if (!is.null(pack_status)){
head(pack_status)
plot <- ggplot(pack_status,
aes(end, downloads, group=package)) + geom_line(aes(color=package),linetype="dashed") +
geom_point(aes(shape=package, color=package)) + theme_minimal()
plot <- plot + xlab("Download date") + ylab("Number of downloads")
print(plot)
}
print(plot)
packages <- c("NHSDataDictionaRy")
pack_status <- cran_stats(packages)
#View the head of the data frame
head(pack_status)
if (!is.null(pack_status)){
head(pack_status)
plot <- ggplot(pack_status,
aes(end, downloads, group=package)) + geom_line(aes(color=package),linetype="dashed") +
geom_point(aes(shape=package, color=package)) + theme_minimal()
plot <- plot + xlab("Download date") + ylab("Number of downloads")
print(plot)
}
print(plot)
package_list <- list("package_dl_plot"= plot,
"download_df"=as_tibble(pack_status),
"downloads_to_date"=sum(pack_status$downloads))
package_list <- list("package_dl_plot"= plot,
"download_df"=as_tibble(pack_status),
"downloads_to_date"=sum(pack_status$downloads))
#Create download log of NHSDataDictionaRy package
library(ggplot2)
library(dlstats)
library(tibble)
packages <- c("NHSDataDictionaRy")
pack_status <- cran_stats(packages)
#View the head of the data frame
head(pack_status)
if (!is.null(pack_status)){
head(pack_status)
plot <- ggplot(pack_status,
aes(end, downloads, group=package)) + geom_line(aes(color=package),linetype="dashed") +
geom_point(aes(shape=package, color=package)) + theme_minimal()
plot <- plot + xlab("Download date") + ylab("Number of downloads")
print(plot)
}
print(plot)
package_list <- list("package_dl_plot"= plot,
"download_df"=as_tibble(pack_status),
"downloads_to_date"=sum(pack_status$downloads))
View(pack_status)
View(package_list)
package_list <- list("package_dl_plot"= plot,
"download_df"=as_tibble(pack_status),
"downloads_to_date"=sum(pack_status$downloads))
package_list$download_df
package_list$package_dl_plot
#Access the plot
package_list$downloads_to_date
setwd("~/GitHub/NHSDataDictionaRy_webinar")
knitr::opts_chunk$set(echo = TRUE)
library(NHSDataDictionaRy)
library(dplyr)
library(magrittr)
library(tibble)
nhs_tibble <- NHSDataDictionaRy::nhs_data_elements()
print(head(nhs_tibble))
View(nhs_tibble)
# Analyse all the links on a website
website_url <- "https://nhsrcommunity.com/home/webinars/"
results <- NHSDataDictionaRy::linkScrapeR(website_url)
print(tail(results, 20))
subset_results <- slice(results, 16)
print(subset_results)
#This opens the 18th result of the URL
browseURL(subset_results$url)
# Filter by a specific lookup required
reduced_tibble <-
dplyr::filter(nhs_tibble, link_name == "ACTIVITY TREATMENT FUNCTION CODE")
#Use the tableR function to query the NHS Data Dictionary website and return the associate tibble
national_codes <- NHSDataDictionaRy::tableR(url=reduced_tibble$full_url,
xpath = reduced_tibble$xpath_nat_code,
title = "NHS Hospital Activity Treatment Function National Codes")
default_codes <- NHSDataDictionaRy::tableR(url=reduced_tibble$full_url,
xpath = reduced_tibble$xpath_default_code,
title = "NHS Hospital Activity Treatment Function Default Codes")
# Here you could merge the codes - as you will have national and default codes
merged_frame <- national_codes %>%
dplyr::bind_rows(default_codes)
# The query has returned results, if the url does not have a lookup table an error will be thrown
print(head(national_codes,10))
print(head(default_codes), 10)
print(head(merged_frame))
act_aggregations <- tibble(SpecCode = as.character(c(101,102,103, 104, 105)),
ActivityCounts = round(rnorm(5,250,3),0),
Month = rep("May", 5))
# Use dplyr to join the NHS activity by specialty code
act_aggregations %>%
left_join(merged_frame, by = c("SpecCode"="Code"))
# This easily joins the lookup on to your data
merged_frameR <- function(filter_param){
# Filter based on passed parameter
reduced_tibble <-
dplyr::filter(nhs_tibble, link_name == filter_param)
# Use NHSDataDictionaRy to return the codes needed for default and national
national_codes <- NHSDataDictionaRy::tableR(url=reduced_tibble$full_url,
xpath = reduced_tibble$xpath_nat_code,
title = paste(filter_param, " - NATIONAL CODES"))
default_codes   <- NHSDataDictionaRy::tableR(url=reduced_tibble$full_url,
xpath = reduced_tibble$xpath_default_code,
title = paste(filter_param, " - DEFAULT CODES"))
# Check whether the national codes or default codes return anything
if (length(national_codes)>0 | length(default_codes)>0){
merged_frame <- national_codes %>%
dplyr::bind_rows(default_codes)
# Return the merged frame if this condition is passed
return(merged_frame)
} else{
stop("No lookup exists for this code set")
# Kill the function
}
}
# Use the function we have created to pass the name of the lookup
tail(merged_frameR("ACTIVITY TREATMENT FUNCTION CODE"), 10)
url <- "https://datadictionary.nhs.uk/data_elements/abbreviated_mental_test_score.html"
xpath_element <- '//*[@id="element_abbreviated_mental_test_score.description"]'
# Run the xpathTextR function to retrieve details of the element retrieved
result_list <- NHSDataDictionaRy::xpathTextR(url, xpath_element)
print(result_list)
# Use the returned result and do some text processing
clean_text <- trimws(unlist(result_list$result))
clean_text <- clean_text %>%
gsub("[\r\n]", "", .) %>% #Remove new line and breaks
trimws() %>% #Get rid of any white space
as.character() #Cast to a character vector
print(clean_text)
# Use the left_xl function to extract the first 11 characters
left_clean <- NHSDataDictionaRy::left_xl(clean_text, 11)
print(left_clean)
# Use the right string to extract the score range
right_clean <- NHSDataDictionaRy::right_xl(clean_text, 8)
print(right_clean)
#Use the mid function to look in the middle of the string
mid_clean <- trimws(NHSDataDictionaRy::mid_xl(clean_text, 15, 42))
print(mid_clean)
#Get the text length
full_string <- len_xl(clean_text)
mid_clean_len <- len_xl(mid_clean)
#Print the length of both strings - the original and mid string extracted text
cat(paste0("The original string length was: ", full_string, "\n", "The mid_xl cleaned string length is: ",
mid_clean_len))
knitr::opts_chunk$set(echo = TRUE)
library(NHSDataDictionaRy)
library(dplyr)
library(magrittr)
library(tibble)
nhs_tibble <- NHSDataDictionaRy::nhs_data_elements()
print(head(nhs_tibble))
# Analyse all the links on a website
website_url <- "https://nhsrcommunity.com/home/webinars/"
results <- NHSDataDictionaRy::linkScrapeR(website_url)
print(tail(results, 20))
subset_results <- slice(results, 16)
print(subset_results)
#This opens the 18th result of the URL
browseURL(subset_results$url)
# Filter by a specific lookup required
reduced_tibble <-
dplyr::filter(nhs_tibble, link_name == "ACTIVITY TREATMENT FUNCTION CODE")
#Use the tableR function to query the NHS Data Dictionary website and return the associate tibble
national_codes <- NHSDataDictionaRy::tableR(url=reduced_tibble$full_url,
xpath = reduced_tibble$xpath_nat_code,
title = "NHS Hospital Activity Treatment Function National Codes")
# The query has returned results, if the url does not have a lookup table an error will be thrown
print(head(national_codes,10))
act_aggregations <- tibble(SpecCode = as.character(c(101,102,103, 104, 105)),
ActivityCounts = round(rnorm(5,250,3),0),
Month = rep("May", 5))
# Use dplyr to join the NHS activity by specialty code
act_aggregations %>%
left_join(national_codes, by = c("SpecCode"="Code"))
# This easily joins the lookup on to your data
merged_frameR <- function(filter_param){
# Filter based on passed parameter
reduced_tibble <-
dplyr::filter(nhs_tibble, link_name == filter_param)
# Use NHSDataDictionaRy to return the codes needed for default and national
national_codes <- NHSDataDictionaRy::tableR(url=reduced_tibble$full_url,
xpath = reduced_tibble$xpath_nat_code,
title = paste(filter_param, " - NATIONAL CODES"))
}
# Use the function we have created to pass the name of the lookup
tail(merged_frameR("ACTIVITY TREATMENT FUNCTION CODE"), 10)
url <- "https://datadictionary.nhs.uk/data_elements/abbreviated_mental_test_score.html"
xpath_element <- '//*[@id="element_abbreviated_mental_test_score.description"]'
# Run the xpathTextR function to retrieve details of the element retrieved
result_list <- NHSDataDictionaRy::xpathTextR(url, xpath_element)
print(result_list)
# Use the returned result and do some text processing
clean_text <- trimws(unlist(result_list$result))
clean_text <- clean_text %>%
gsub("[\r\n]", "", .) %>% #Remove new line and breaks
trimws() %>% #Get rid of any white space
as.character() #Cast to a character vector
print(clean_text)
# Use the left_xl function to extract the first 11 characters
left_clean <- NHSDataDictionaRy::left_xl(clean_text, 11)
print(left_clean)
# Use the right string to extract the score range
right_clean <- NHSDataDictionaRy::right_xl(clean_text, 8)
print(right_clean)
#Use the mid function to look in the middle of the string
mid_clean <- trimws(NHSDataDictionaRy::mid_xl(clean_text, 15, 42))
print(mid_clean)
#Get the text length
full_string <- len_xl(clean_text)
mid_clean_len <- len_xl(mid_clean)
#Print the length of both strings - the original and mid string extracted text
cat(paste0("The original string length was: ", full_string, "\n", "The mid_xl cleaned string length is: ",
mid_clean_len))
os_list <- NHSDataDictionaRy::openSafely_listR("opensafely/ace-inhibitor-medications", title="Ace Inhibitor")
glimpse(os_list)
